// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API Mistral
const API_KEY = '030Ujp7uvKCtTdrO8BreT1kj2vpFznGq';
const API_URL = 'https://api.mistral.ai/v1/chat/completions';

// –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Mistral
const MODELS = {
    'mistral-tiny': 'mistral-tiny',
    'mistral-small': 'mistral-small', 
    'mistral-medium': 'mistral-medium'
};

// –ò—Å–ø–æ–ª—å–∑—É–µ–º mistral-small –∫–∞–∫ –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–æ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Mistral 8x7B)
const MODEL = MODELS['mistral-small'];

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let chats = [];
let currentChatId = null;
let isSending = false;
const MAX_CHATS = 10;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    createFruitRain();
    document.getElementById('messageInput').focus();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    loadChats();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—Ä—É–∫—Ç–æ–≤—ã–π –¥–æ–∂–¥—å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    setInterval(createFruitRain, 10000);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    document.getElementById('messageInput').addEventListener('keypress', function(event) {
        if (event.key === 'Enter' && !event.shiftKey) {
            event.preventDefault();
            sendMessage();
        }
    });
    
    document.getElementById('newChatButton').addEventListener('click', function() {
        createNewChat();
    });
    
    document.getElementById('menuButton').addEventListener('click', function() {
        openSidebar();
    });
    
    document.getElementById('closeSidebar').addEventListener('click', function() {
        closeSidebar();
    });
    
    document.getElementById('sidebarOverlay').addEventListener('click', function() {
        closeSidebar();
    });
    
    document.getElementById('sendButton').addEventListener('click', function() {
        sendMessage();
    });
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω—É—Ç—Ä–∏ –Ω–µ–µ
    document.getElementById('chatsSidebar').addEventListener('click', function(e) {
        e.stopPropagation();
    });
    
    // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —á–∞—Ç–∞
    document.querySelector('.chat-container').addEventListener('click', function() {
        document.getElementById('messageInput').focus();
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–∞–π–ø–æ–≤ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    let startX = 0;
    document.querySelector('.chat-container').addEventListener('touchstart', function(e) {
        startX = e.touches[0].clientX;
    });
    
    document.querySelector('.chat-container').addEventListener('touchend', function(e) {
        const endX = e.changedTouches[0].clientX;
        const diffX = startX - endX;
        
        // –ï—Å–ª–∏ —Å–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ –±–æ–ª–µ–µ 50px, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
        if (diffX < -50) {
            openSidebar();
        }
        
        // –ï—Å–ª–∏ —Å–≤–∞–π–ø –≤–ª–µ–≤–æ –±–æ–ª–µ–µ 50px, –∑–∞–∫—Ä—ã–≤–∞–µ–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
        if (diffX > 50) {
            closeSidebar();
        }
    });
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª—å—é
function openSidebar() {
    document.getElementById('chatsSidebar').classList.add('active');
    document.getElementById('sidebarOverlay').classList.add('active');
    renderChatsList();
}

function closeSidebar() {
    document.getElementById('chatsSidebar').classList.remove('active');
    document.getElementById('sidebarOverlay').classList.remove('active');
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏
function loadChats() {
    const savedChats = localStorage.getItem('fruitChats');
    if (savedChats) {
        chats = JSON.parse(savedChats);
        
        if (chats.length > 0) {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
            currentChatId = chats[chats.length - 1].id;
            loadChat(currentChatId);
        } else {
            // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π —á–∞—Ç, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö
            createNewChat();
        }
    } else {
        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π —á–∞—Ç
        createNewChat();
    }
}

function saveChats() {
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤
    if (chats.length > MAX_CHATS) {
        chats = chats.slice(chats.length - MAX_CHATS);
    }
    
    localStorage.setItem('fruitChats', JSON.stringify(chats));
}

function createNewChat() {
    const newChat = {
        id: Date.now().toString(),
        title: '–ù–æ–≤—ã–π —á–∞—Ç',
        messages: [],
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    };
    
    chats.push(newChat);
    currentChatId = newChat.id;
    saveChats();
    renderChat();
    renderChatsList();
    closeSidebar();
    document.getElementById('messageInput').focus();
    showStatus('–ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω!', 'success');
}

function loadChat(chatId) {
    currentChatId = chatId;
    renderChat();
    closeSidebar();
    document.getElementById('messageInput').focus();
}

function deleteChat(chatId, event) {
    if (event) event.stopPropagation();
    
    if (chats.length <= 1) {
        showStatus('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —á–∞—Ç!', 'error');
        return;
    }
    
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç?')) {
        chats = chats.filter(chat => chat.id !== chatId);
        
        if (currentChatId === chatId) {
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π —á–∞—Ç
            currentChatId = chats.length > 0 ? chats[0].id : null;
        }
        
        saveChats();
        renderChat();
        renderChatsList();
        showStatus('–ß–∞—Ç —É–¥–∞–ª–µ–Ω!', 'success');
    }
}

function updateChatTitle(chatId, newTitle) {
    const chat = chats.find(c => c.id === chatId);
    if (chat) {
        chat.title = newTitle;
        chat.updatedAt = new Date().toISOString();
        saveChats();
        renderChatsList();
    }
}

function renderChatsList() {
    const chatsList = document.getElementById('chatsList');
    chatsList.innerHTML = '';
    
    if (chats.length === 0) {
        chatsList.innerHTML = '<p class="text-center text-gray-500 py-4">–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤</p>';
        return;
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Ç—ã –ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    const sortedChats = [...chats].sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));
    
    sortedChats.forEach(chat => {
        const chatItem = document.createElement('div');
        chatItem.className = `chat-item ${chat.id === currentChatId ? 'active' : ''}`;
        chatItem.innerHTML = `
            <div class="flex-1" onclick="loadChat('${chat.id}')">
                <div class="chat-title">${escapeHtml(chat.title)}</div>
                <div class="chat-preview">${getChatPreview(chat)}</div>
                <div class="chat-date">${formatDate(chat.updatedAt)}</div>
            </div>
            <button class="delete-chat-btn" onclick="deleteChat('${chat.id}', event)">
                <i class="fas fa-trash"></i>
            </button>
        `;
        chatsList.appendChild(chatItem);
    });
}

function getChatPreview(chat) {
    if (chat.messages.length === 0) return '–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π';
    
    const lastMessage = chat.messages[chat.messages.length - 1];
    const content = lastMessage.content.substring(0, 30);
    return lastMessage.role === 'user' ? `–í—ã: ${content}...` : `–§—Ä—É–∫—Ç–∏–∫: ${content}...`;
}

function formatDate(dateString) {
    const date = new Date(dateString);
    const now = new Date();
    const diffMs = now - date;
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    
    if (diffDays === 0) {
        return '–°–µ–≥–æ–¥–Ω—è';
    } else if (diffDays === 1) {
        return '–í—á–µ—Ä–∞';
    } else if (diffDays < 7) {
        return `${diffDays} –¥–Ω–µ–π –Ω–∞–∑–∞–¥`;
    } else {
        return date.toLocaleDateString('ru-RU');
    }
}

function renderChat() {
    const chatMessages = document.getElementById('chatMessages');
    const emptyChat = document.getElementById('emptyChat');
    
    if (!currentChatId || chats.length === 0) {
        chatMessages.innerHTML = `
            <div class="empty-chat" id="emptyChat">
                <div class="empty-chat-icon">üçì</div>
                <h2 class="text-2xl font-bold mb-2">–ù–∞—á–Ω–∏ –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä!</h2>
                <p class="text-lg">–ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –§—Ä—É–∫—Ç–∏–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.</p>
            </div>
        `;
        return;
    }
    
    const currentChat = chats.find(chat => chat.id === currentChatId);
    if (!currentChat) return;
    
    chatMessages.innerHTML = '';
    
    if (currentChat.messages.length === 0) {
        chatMessages.innerHTML = `
            <div class="empty-chat" id="emptyChat">
                <div class="empty-chat-icon">üçì</div>
                <h2 class="text-2xl font-bold mb-2">–ù–∞—á–Ω–∏ –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä!</h2>
                <p class="text-lg">–ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –§—Ä—É–∫—Ç–∏–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.</p>
            </div>
        `;
        return;
    }
    
    currentChat.messages.forEach(message => {
        addMessageToChat(message.role, message.content, false);
    });
    
    scrollToBottom();
}

// –°–æ–∑–¥–∞–µ–º —Ñ—Ä—É–∫—Ç–æ–≤—ã–π –¥–æ–∂–¥—å
function createFruitRain() {
    const fruits = ['üçì', 'üçç', 'üçá', 'üçâ', 'üçä', 'üçã', 'üçå', 'üçé', 'üçë', 'üçí'];
    const rainContainer = document.getElementById('fruitRain');
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —Ñ—Ä—É–∫—Ç–æ–≤
    rainContainer.innerHTML = '';
    
    for (let i = 0; i < 15; i++) {
        setTimeout(() => {
            const fruit = document.createElement('div');
            fruit.className = 'fruit';
            fruit.textContent = fruits[Math.floor(Math.random() * fruits.length)];
            fruit.style.left = Math.random() * 100 + 'vw';
            fruit.style.animationDuration = (Math.random() * 5 + 3) + 's';
            fruit.style.animationDelay = Math.random() * 2 + 's';
            fruit.style.opacity = Math.random() * 0.4 + 0.2;
            fruit.style.fontSize = (Math.random() * 10 + 20) + 'px';
            rainContainer.appendChild(fruit);
            
            // –£–¥–∞–ª—è–µ–º —Ñ—Ä—É–∫—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
                if (fruit.parentNode === rainContainer) {
                    rainContainer.removeChild(fruit);
                }
            }, parseFloat(fruit.style.animationDuration) * 1000 + 1000);
        }, i * 300);
    }
}

// –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function showStatus(message, type = 'info') {
    const statusEl = document.getElementById('statusMessage');
    statusEl.textContent = message;
    statusEl.className = 'status-message';
    
    if (type === 'success') {
        statusEl.classList.add('status-success');
    } else if (type === 'error') {
        statusEl.classList.add('status-error');
    }
    
    setTimeout(() => {
        statusEl.style.display = 'none';
    }, 3000);
}

function showTypingIndicator() {
    document.getElementById('typingIndicator').classList.remove('hidden');
    scrollToBottom();
}

function hideTypingIndicator() {
    document.getElementById('typingIndicator').classList.add('hidden');
}

function scrollToBottom() {
    const container = document.getElementById('chatMessages');
    setTimeout(() => {
        container.scrollTop = container.scrollHeight;
    }, 100);
}

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
function escapeHtml(unsafe) {
    return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}

async function sendMessage() {
    if (isSending) return;
    
    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendButton');
    const message = messageInput.value.trim();
    
    if (!message) {
        showStatus('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', 'error');
        return;
    }
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
    isSending = true;
    sendButton.disabled = true;
    sendButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
    
    // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç–æ–π —á–∞—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    const emptyChat = document.getElementById('emptyChat');
    if (emptyChat) {
        emptyChat.remove();
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    addMessageToChat('user', message);
    messageInput.value = '';
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
    const currentChat = chats.find(chat => chat.id === currentChatId);
    if (currentChat) {
        currentChat.messages.push({ role: 'user', content: message });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (currentChat.messages.length === 1) {
            const title = message.length > 20 ? message.substring(0, 20) + '...' : message;
            updateChatTitle(currentChatId, title);
        }
        
        currentChat.updatedAt = new Date().toISOString();
        saveChats();
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
    showTypingIndicator();
    showStatus('–§—Ä—É–∫—Ç–∏–∫ –¥—É–º–∞–µ—Ç...', 'info');
    
    try {
        // –£–õ–£–ß–®–ï–ù–ù–´–ô —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –¥–µ—Ç–µ–π —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É
        const messagesForAPI = [
            { 
                role: 'system', 
                content: `–¢—ã - –§—Ä—É–∫—Ç–∏–∫, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –¥–µ—Ç–µ–π –º–ª–∞–¥—à–µ–≥–æ —à–∫–æ–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞. –¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å –≤ —É—á–µ–±–µ, —Å–æ–±–ª—é–¥–∞—è –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≥—Ä–∞–º–º–∞—Ç–∏–∫—É —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.

–û–°–û–ë–´–ï –ü–†–ê–í–ò–õ–ê:
1. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –≥—Ä–∞–º–æ—Ç–Ω–æ, –±–µ–∑ –æ—à–∏–±–æ–∫ - —Ç—ã –æ–±—Ä–∞–∑–µ—Ü –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞
2. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ, –ø–æ–Ω—è—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
3. –û–±—ä—è—Å–Ω—è–π —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–ø—ã –¥–æ—Å—Ç—É–ø–Ω—ã–º —è–∑—ã–∫–æ–º
4. –ë—É–¥—å —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º
5. –ò—Å–ø–æ–ª—å–∑—É–π 1-2 —ç–º–æ–¥–∑–∏ –≤ –æ—Ç–≤–µ—Ç–µ –¥–ª—è –¥—Ä—É–∂–µ–ª—é–±–∏—è

–ü–†–ò–ú–ï–†–´ –ü–†–ê–í–ò–õ–¨–ù–´–• –û–¢–í–ï–¢–û–í:
"–ü—Ä–∏–≤–µ—Ç! –Ø –§—Ä—É–∫—Ç–∏–∫ üçé –ü–æ–º–æ–≥—É —Ç–µ–±–µ —Å —É—Ä–æ–∫–∞–º–∏. –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?"
"–ú–æ–ª–æ–¥–µ—Ü, —á—Ç–æ —Å–ø—Ä–æ—Å–∏–ª! –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç—É –∑–∞–¥–∞—á—É –ø–æ —à–∞–≥–∞–º üß©"
"–ó–∞–ø–æ–º–Ω–∏: '–∂–∏-—à–∏' –ø–∏—à–∏ —Å –±—É–∫–≤–æ–π '–∏'. –≠—Ç–æ –ø—Ä–∞–≤–∏–ª–æ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ ‚úèÔ∏è"

–ù–ò–ö–û–ì–î–ê –ù–ï –î–ï–õ–ê–ô:
- –ù–µ –¥–∞–≤–∞–π –≥–æ—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–∂–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
- –ù–µ —Ç–æ—Ä–æ–ø–∏ —Ä–µ–±–µ–Ω–∫–∞ - –¥–∞–≤–∞–π –≤—Ä–µ–º—è –ø–æ–¥—É–º–∞—Ç—å
- –ù–µ –∫—Ä–∏—Ç–∏–∫—É–π –∑–∞ –æ—à–∏–±–∫–∏, –∞ –º—è–≥–∫–æ –∏—Å–ø—Ä–∞–≤–ª—è–π –∏—Ö` 
            },
            ...currentChat.messages.slice(-6)
        ];
        
        const response = await fetch(API_URL, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${API_KEY}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: MODEL,
                messages: messagesForAPI,
                max_tokens: 800,  // –£–º–µ–Ω—å—à–∏–ª–∏ –¥–ª—è –±–æ–ª–µ–µ –∫—Ä–∞—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
                temperature: 0.3,  // –ü–æ–Ω–∏–∑–∏–ª–∏ –¥–ª—è –±–æ–ª—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
                top_p: 0.9,
                stream: false
            })
        });
        
        if (!response.ok) {
            let errorMessage = `HTTP error! status: ${response.status}`;
            try {
                const errorData = await response.json();
                errorMessage = errorData.error?.message || errorData.error?.code || errorMessage;
            } catch (e) {
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON —Å –æ—à–∏–±–∫–æ–π
                const errorText = await response.text();
                errorMessage = errorText || errorMessage;
            }
            throw new Error(errorMessage);
        }
        
        const data = await response.json();
        
        if (!data.choices || !data.choices[0] || !data.choices[0].message) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API');
        }
        
        const aiResponse = data.choices[0].message.content;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ —á–∞—Ç
        if (currentChat) {
            currentChat.messages.push({ role: 'assistant', content: aiResponse });
            currentChat.updatedAt = new Date().toISOString();
            saveChats();
        }
        
        hideTypingIndicator();
        addMessageToChat('assistant', aiResponse);
        showStatus('–§—Ä—É–∫—Ç–∏–∫ –æ—Ç–≤–µ—Ç–∏–ª!', 'success');
        
    } catch (error) {
        console.error('Error:', error);
        hideTypingIndicator();
        
        // –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        let errorMessage = '–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! üçá';
        if (error.message.includes('401')) {
            errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.';
        } else if (error.message.includes('400')) {
            errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö.';
        } else if (error.message.includes('429')) {
            errorMessage = '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        } else if (error.message.includes('500')) {
            errorMessage = '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        }
        
        showStatus(errorMessage, 'error');
        addMessageToChat('assistant', `${errorMessage} üòä\n\n–î–µ—Ç–∞–ª–∏: ${escapeHtml(error.message)}`);
    } finally {
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
        isSending = false;
        sendButton.disabled = false;
        sendButton.innerHTML = '<i class="fas fa-paper-plane"></i>';
        messageInput.focus();
    }
}

function addMessageToChat(role, content, scroll = true) {
    const chatMessages = document.getElementById('chatMessages');
    const messageDiv = document.createElement('div');
    
    if (role === 'user') {
        messageDiv.className = 'flex items-start justify-end';
        messageDiv.innerHTML = `
            <div class="chat-bubble user-bubble">
                <div class="message-content">${escapeHtml(content)}</div>
            </div>
            <div class="fruit-avatar" style="background: linear-gradient(135deg, #a8edea, #fed6e3);">üòä</div>
        `;
    } else {
        messageDiv.className = 'flex items-start';
        messageDiv.innerHTML = `
            <div class="fruit-avatar" style="background: linear-gradient(135deg, #ffd93d, #ff6b6b);">${getRandomFruit()}</div>
            <div class="chat-bubble bot-bubble">
                <div class="font-bold text-purple-600 mb-1">–§—Ä—É–∫—Ç–∏–∫</div>
                <div class="message-content">${content}</div>
            </div>
        `;
    }
    
    chatMessages.appendChild(messageDiv);
    if (scroll) scrollToBottom();
}

function getRandomFruit() {
    const fruits = ['üçì', 'üçç', 'üçá', 'üçâ', 'üçä', 'üçã', 'üçå', 'üçé', 'üçë', 'üçí'];
    return fruits[Math.floor(Math.random() * fruits.length)];
}