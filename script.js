// script.js
// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API Mistral - –∫–ª—é—á —Ç–µ–ø–µ—Ä—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const API_CONFIG = {
    url: 'https://api.mistral.ai/v1/chat/completions',
    // –ö–ª—é—á –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ config.js
    key: null
};

// –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Mistral
const MODELS = {
    'mistral-tiny': 'mistral-tiny',
    'mistral-small': 'mistral-small', 
    'mistral-medium': 'mistral-medium'
};

// –ò—Å–ø–æ–ª—å–∑—É–µ–º mistral-small –∫–∞–∫ –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const MODEL = MODELS['mistral-small'];

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let chats = [];
let currentChatId = null;
let isSending = false;
const MAX_CHATS = 10;
const MAX_MESSAGE_LENGTH = 1000;

// –≠–º–æ–¥–∑–∏ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤
const FRUIT_EMOJIS = ['üçì', 'üçç', 'üçá', 'üçâ', 'üçä', 'üçã', 'üçå', 'üçé', 'üçë', 'üçí', 'ü•≠', 'ü´ê', 'üçê', 'ü•ù'];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

async function initializeApp() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å API –∫–ª—é—á–æ–º
    await loadConfig();
    
    createFruitRain();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    loadChats();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—Ä—É–∫—Ç–æ–≤—ã–π –¥–æ–∂–¥—å –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
    setInterval(createFruitRain, 15000);
    
    setupEventListeners();
    setupAccessibility();
    setupEnhancedSwipeGestures();
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É
    document.documentElement.setAttribute('data-theme', 'light');
    document.body.style.background = 'linear-gradient(135deg, #ffafbd 0%, #ffc3a0 100%)';
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PWA
    initializePWA();
    
    // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –Ω–µ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    if (!isMobileDevice()) {
        setTimeout(() => {
            document.getElementById('messageInput').focus();
        }, 500);
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function isMobileDevice() {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || 
           window.innerWidth <= 768;
}

async function loadConfig() {
    try {
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ñ–∞–π–ª–∞
        const response = await fetch('config.js');
        if (response.ok) {
            // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º config.js
            const script = document.createElement('script');
            script.src = 'config.js';
            script.type = 'text/javascript';
            document.head.appendChild(script);
            
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            await new Promise(resolve => setTimeout(resolve, 100));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –ª–∏ API –∫–ª—é—á
            if (typeof window.API_KEYS !== 'undefined' && window.API_KEYS.mistral) {
                API_CONFIG.key = window.API_KEYS.mistral;
                console.log('API –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            } else {
                throw new Error('API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
            }
        } else {
            throw new Error('–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
        showStatus('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'error');
    }
}

function initializePWA() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if (window.matchMedia('(display-mode: standalone)').matches) {
        console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ PWA —Ä–µ–∂–∏–º–µ');
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
    updateOnlineStatus();
    window.addEventListener('online', updateOnlineStatus);
    window.addEventListener('offline', updateOnlineStatus);
}

function updateOnlineStatus() {
    if (navigator.onLine) {
        showStatus('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
    } else {
        showStatus('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ', 'error');
    }
}

function setupEventListeners() {
    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendButton');
    const newChatButton = document.getElementById('newChatButton');
    const menuButton = document.getElementById('menuButton');
    const closeSidebar = document.getElementById('closeSidebar');
    const sidebarOverlay = document.getElementById('sidebarOverlay');
    const chatContainer = document.querySelector('.chat-container');
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Å—á–µ—Ç–æ–º —Å–∏–º–≤–æ–ª–æ–≤
    messageInput.addEventListener('input', function(e) {
        handleMessageInput(e);
        updateCharacterCount();
    });
    
    messageInput.addEventListener('keypress', handleMessageKeypress);
    messageInput.addEventListener('paste', handlePaste);
    
    // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω–æ–º —Ç–∞–ø–µ
    if (isMobileDevice()) {
        messageInput.addEventListener('touchstart', function(e) {
            // –ü–æ–∑–≤–æ–ª—è–µ–º —Ñ–æ–∫—É—Å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä—è–º–æ–º —Ç–∞–ø–µ –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            e.stopPropagation();
        });
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–æ–∫—É—Å –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —á–∞—Ç–∞
        chatContainer.addEventListener('touchstart', function(e) {
            if (e.target !== messageInput && !messageInput.contains(e.target)) {
                // –°–Ω–∏–º–∞–µ–º —Ñ–æ–∫—É—Å —Å –ø–æ–ª—è –≤–≤–æ–¥–∞, –µ—Å–ª–∏ —Ç–∞–ø –Ω–µ –Ω–∞ –Ω–µ–º
                messageInput.blur();
            }
        });
    } else {
        // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        chatContainer.addEventListener('click', function() {
            messageInput.focus();
        });
    }
    
    // –ö–Ω–æ–ø–∫–∏
    sendButton.addEventListener('click', sendMessage);
    newChatButton.addEventListener('click', createNewChat);
    menuButton.addEventListener('click', openSidebar);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    closeSidebar.addEventListener('click', function(e) {
        closeSidebarFunction();
    });
    
    sidebarOverlay.addEventListener('click', function(e) {
        closeSidebarFunction();
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Escape
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeSidebarFunction();
        }
    });
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    window.addEventListener('beforeunload', function(e) {
        if (isSending) {
            e.preventDefault();
            e.returnValue = '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–π—Ç–∏?';
        }
    });
}

function setupEnhancedSwipeGestures() {
    setupSwipeGestures();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ —Å–≤–∞–π–ø–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const isFirstVisit = !localStorage.getItem('fruityChatSeenSwipeHint');
    if (isFirstVisit && window.innerWidth <= 768) {
        setTimeout(() => {
            document.querySelector('.chat-container').classList.add('swipe-hint');
            setTimeout(() => {
                document.querySelector('.chat-container').classList.remove('swipe-hint');
                localStorage.setItem('fruityChatSeenSwipeHint', 'true');
            }, 4000);
        }, 2000);
    }
}

function setupSwipeGestures() {
    let startX = 0;
    let startY = 0;
    let currentX = 0;
    let isSwiping = false;
    let swipeDistance = 0;
    const SWIPE_THRESHOLD = 50; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å–≤–∞–π–ø–∞
    const SIDEBAR_SWIPE_AREA = 20; // –û–±–ª–∞—Å—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–≤–∞–π–ø–∞ –æ—Ç –∫—Ä–∞—è
    
    const chatContainer = document.querySelector('.chat-container');
    const sidebar = document.getElementById('chatsSidebar');
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–≤–∞–π–ø–∞
    chatContainer.addEventListener('touchstart', function(e) {
        startX = e.touches[0].clientX;
        startY = e.touches[0].clientY;
        currentX = startX;
        isSwiping = true;
        swipeDistance = 0;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        sidebar.style.transform = 'translateX(-100%)';
        sidebar.style.transition = 'none';
        sidebar.classList.add('swiping');
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –ø—Ä–∏ —Å–≤–∞–π–ø–µ
    chatContainer.addEventListener('touchmove', function(e) {
        if (!isSwiping) return;
        
        currentX = e.touches[0].clientX;
        const diffX = currentX - startX;
        const diffY = Math.abs(e.touches[0].clientY - startY);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø (–Ω–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª)
        if (Math.abs(diffX) > diffY && Math.abs(diffX) > 5) {
            e.preventDefault();
            
            // –°–≤–∞–π–ø —Ç–æ–ª—å–∫–æ –∏–∑ –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è —ç–∫—Ä–∞–Ω–∞
            if (startX <= SIDEBAR_SWIPE_AREA && diffX > 0) {
                swipeDistance = Math.min(diffX, window.innerWidth * 0.8);
                
                // –ü–ª–∞–≤–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –ø—Ä–∏ —Å–≤–∞–π–ø–µ
                const progress = swipeDistance / (window.innerWidth * 0.8);
                sidebar.style.transform = `translateX(${-100 + (progress * 100)}%)`;
                sidebar.style.opacity = progress;
                
                // –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ –æ–≤–µ—Ä–ª–µ—è
                const overlay = document.getElementById('sidebarOverlay');
                overlay.style.display = 'block';
                overlay.style.opacity = progress * 0.5;
            }
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–≤–∞–π–ø–∞
    chatContainer.addEventListener('touchend', function(e) {
        if (!isSwiping) return;
        isSwiping = false;
        sidebar.classList.remove('swiping');
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        sidebar.style.transition = 'transform 0.3s ease, opacity 0.3s ease';
        
        const diffX = currentX - startX;
        
        // –ï—Å–ª–∏ —Å–≤–∞–π–ø –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
        if (swipeDistance > SWIPE_THRESHOLD && diffX > 0) {
            openSidebar();
        } else {
            // –ò–Ω–∞—á–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º
            closeSidebarFunction();
        }
    });
}

function setupAccessibility() {
    // –î–æ–±–∞–≤–ª—è–µ–º ARIA –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendButton');
    
    messageInput.setAttribute('aria-label', '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
    sendButton.setAttribute('aria-label', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    document.addEventListener('keydown', function(e) {
        if (e.ctrlKey && e.key === 'k') {
            e.preventDefault();
            messageInput.focus();
        }
    });
}

function handleMessageInput(e) {
    const messageInput = document.getElementById('messageInput');
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
    messageInput.style.height = 'auto';
    messageInput.style.height = Math.min(messageInput.scrollHeight, 200) + 'px';
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    const sendButton = document.getElementById('sendButton');
    const hasText = messageInput.value.trim().length > 0;
    const isValidLength = messageInput.value.length <= MAX_MESSAGE_LENGTH;
    
    sendButton.disabled = !hasText || !isValidLength || isSending;
}

function updateCharacterCount() {
    const messageInput = document.getElementById('messageInput');
    const characterCount = document.getElementById('characterCount');
    const currentLength = messageInput.value.length;
    
    characterCount.textContent = `${currentLength}/${MAX_MESSAGE_LENGTH}`;
    
    if (currentLength > MAX_MESSAGE_LENGTH * 0.9) {
        characterCount.classList.add('warning');
    } else {
        characterCount.classList.remove('warning');
    }
}

function handleMessageKeypress(e) {
    if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        sendMessage();
    }
}

function handlePaste(e) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–µ–∑–∫–æ–π
    setTimeout(() => {
        const messageInput = document.getElementById('messageInput');
        if (messageInput.value.length > MAX_MESSAGE_LENGTH) {
            messageInput.value = messageInput.value.substring(0, MAX_MESSAGE_LENGTH);
            showStatus(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ –¥–æ ${MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤`, 'warning');
        }
        updateCharacterCount();
        handleMessageInput();
    }, 0);
}

async function sendMessage() {
    if (isSending) return;
    
    const messageInput = document.getElementById('messageInput');
    const message = messageInput.value.trim();
    
    if (!message) return;
    if (message.length > MAX_MESSAGE_LENGTH) {
        showStatus(`–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º ${MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)`, 'error');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    if (!API_CONFIG.key) {
        showStatus('API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.', 'error');
        return;
    }
    
    isSending = true;
    updateSendButtonState();
    
    try {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!currentChatId) {
            createNewChat();
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        addMessageToChat(message, 'user');
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        messageInput.value = '';
        updateCharacterCount();
        handleMessageInput();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
        showTypingIndicator();
        
        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Mistral AI
        const response = await getMistralResponse(message);
        
        // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
        hideTypingIndicator();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        addMessageToChat(response, 'bot');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Ç—ã
        saveChats();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        hideTypingIndicator();
        
        let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è';
        if (error.message.includes('API key')) {
            errorMessage = '–û—à–∏–±–∫–∞ API –∫–ª—é—á–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.';
        } else if (error.message.includes('network') || error.message.includes('Network')) {
            errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
        } else if (error.message.includes('rate limit')) {
            errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        }
        
        showStatus(errorMessage, 'error');
        addMessageToChat(errorMessage, 'bot');
    } finally {
        isSending = false;
        updateSendButtonState();
    }
}

async function getMistralResponse(userMessage) {
    const currentChat = chats.find(chat => chat.id === currentChatId);
    if (!currentChat) throw new Error('–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const messages = currentChat.messages
        .filter(msg => msg.content && msg.content.trim())
        .slice(-10) // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        .map(msg => ({
            role: msg.type === 'user' ? 'user' : 'assistant',
            content: msg.content
        }));
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    messages.push({
        role: 'user',
        content: userMessage
    });
    
    const requestBody = {
        model: MODEL,
        messages: messages,
        temperature: 0.7,
        max_tokens: 1000,
        top_p: 1,
        stream: false
    };
    
    const response = await fetch(API_CONFIG.url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${API_CONFIG.key}`
        },
        body: JSON.stringify(requestBody)
    });
    
    if (!response.ok) {
        const errorText = await response.text();
        let errorMessage = `HTTP error! status: ${response.status}`;
        
        try {
            const errorData = JSON.parse(errorText);
            if (errorData.error && errorData.error.message) {
                errorMessage = errorData.error.message;
            }
        } catch (e) {
            errorMessage = errorText || errorMessage;
        }
        
        throw new Error(errorMessage);
    }
    
    const data = await response.json();
    
    if (data.choices && data.choices[0] && data.choices[0].message) {
        return data.choices[0].message.content.trim();
    } else {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API');
    }
}

function addMessageToChat(content, type) {
    if (!currentChatId) return;
    
    const currentChat = chats.find(chat => chat.id === currentChatId);
    if (!currentChat) return;
    
    const message = {
        id: Date.now() + Math.random(),
        type: type,
        content: content,
        timestamp: new Date().toISOString()
    };
    
    currentChat.messages.push(message);
    currentChat.lastActivity = message.timestamp;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é —á–∞—Ç–∞
    if (type === 'user') {
        currentChat.preview = content.length > 50 ? content.substring(0, 50) + '...' : content;
    }
    
    displayMessage(message);
    saveChats();
    updateChatsList();
}

function displayMessage(message) {
    const messagesContainer = document.getElementById('messagesContainer');
    const emptyChat = document.getElementById('emptyChat');
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–º —á–∞—Ç–µ
    if (emptyChat) {
        emptyChat.style.display = 'none';
    }
    
    const messageElement = createMessageElement(message);
    messagesContainer.appendChild(messageElement);
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    scrollToBottom();
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        messageElement.classList.add('message-enter');
    }, 50);
}

function createMessageElement(message) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${message.type}-message`;
    
    const isUser = message.type === 'user';
    const avatarEmoji = isUser ? 'ü´ê' : 'ü§ñ'; // –ï–∂–µ–≤–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    messageDiv.innerHTML = `
        <div style="display: flex; align-items: flex-start; justify-content: ${isUser ? 'flex-end' : 'flex-start'}; margin-bottom: 1rem;">
            ${!isUser ? `
                <div class="bot-avatar">
                    <span class="avatar-emoji">${avatarEmoji}</span>
                </div>
            ` : ''}
            
            <div class="chat-bubble ${isUser ? 'user-bubble' : 'bot-bubble'}" style="order: ${isUser ? '1' : '2'};">
                <div class="message-content">${formatMessageContent(message.content)}</div>
                <div class="message-time">${formatTime(message.timestamp)}</div>
            </div>
            
            ${isUser ? `
                <div class="user-avatar">
                    <span class="avatar-emoji blackberry-glow">${avatarEmoji}</span>
                </div>
            ` : ''}
        </div>
    `;
    
    return messageDiv;
}

function formatMessageContent(content) {
    // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ <br> –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML
    return content
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/\n/g, '<br>')
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/\*(.*?)\*/g, '<em>$1</em>')
        .replace(/`(.*?)`/g, '<code>$1</code>');
}

function formatTime(timestamp) {
    const date = new Date(timestamp);
    return date.toLocaleTimeString('ru-RU', { 
        hour: '2-digit', 
        minute: '2-digit' 
    });
}

function showTypingIndicator() {
    const messagesContainer = document.getElementById('messagesContainer');
    
    const typingDiv = document.createElement('div');
    typingDiv.className = 'message bot-message';
    typingDiv.id = 'typingIndicator';
    
    typingDiv.innerHTML = `
        <div style="display: flex; align-items: flex-start; margin-bottom: 1rem;">
            <div class="bot-avatar">
                <span class="avatar-emoji">ü§ñ</span>
            </div>
            <div class="chat-bubble bot-bubble">
                <div class="typing-dots">
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                </div>
            </div>
        </div>
    `;
    
    messagesContainer.appendChild(typingDiv);
    scrollToBottom();
}

function hideTypingIndicator() {
    const typingIndicator = document.getElementById('typingIndicator');
    if (typingIndicator) {
        typingIndicator.remove();
    }
}

function scrollToBottom() {
    const messagesContainer = document.getElementById('messagesContainer');
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

function updateSendButtonState() {
    const sendButton = document.getElementById('sendButton');
    const messageInput = document.getElementById('messageInput');
    
    if (isSending) {
        sendButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
        sendButton.disabled = true;
    } else {
        sendButton.innerHTML = '<i class="fas fa-paper-plane"></i>';
        const hasText = messageInput.value.trim().length > 0;
        const isValidLength = messageInput.value.length <= MAX_MESSAGE_LENGTH;
        sendButton.disabled = !hasText || !isValidLength;
    }
}

function createNewChat() {
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤
    if (chats.length >= MAX_CHATS) {
        showStatus(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤: ${MAX_CHATS}`, 'warning');
        return;
    }
    
    const newChat = {
        id: 'chat_' + Date.now(),
        title: `–ß–∞—Ç ${chats.length + 1}`,
        preview: '–ù–æ–≤—ã–π —á–∞—Ç...',
        messages: [],
        createdAt: new Date().toISOString(),
        lastActivity: new Date().toISOString()
    };
    
    chats.unshift(newChat);
    currentChatId = newChat.id;
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
    const messagesContainer = document.getElementById('messagesContainer');
    messagesContainer.innerHTML = `
        <div id="emptyChat" class="empty-chat">
            <div class="empty-chat-icon">ü´ê</div>
            <h3>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FruityChat!</h3>
            <p>–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å –ò–ò, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ.</p>
        </div>
    `;
    
    saveChats();
    updateChatsList();
    closeSidebarFunction();
    
    showStatus('–ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω!', 'success');
    
    // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ)
    if (!isMobileDevice()) {
        setTimeout(() => {
            document.getElementById('messageInput').focus();
        }, 300);
    }
}

function openSidebar() {
    const sidebar = document.getElementById('chatsSidebar');
    const overlay = document.getElementById('sidebarOverlay');
    
    sidebar.classList.add('active');
    overlay.classList.add('active');
    overlay.style.display = 'block';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
    updateChatsList();
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–∫—Ä–æ–ª–ª –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    document.body.style.overflow = 'hidden';
}

function closeSidebarFunction() {
    const sidebar = document.getElementById('chatsSidebar');
    const overlay = document.getElementById('sidebarOverlay');
    
    sidebar.classList.remove('active');
    overlay.classList.remove('active');
    
    setTimeout(() => {
        overlay.style.display = 'none';
        document.body.style.overflow = '';
    }, 300);
}

function updateChatsList() {
    const chatsList = document.getElementById('chatsList');
    if (!chatsList) return;
    
    chatsList.innerHTML = '';
    
    if (chats.length === 0) {
        chatsList.innerHTML = `
            <div class="sidebar-info">
                <p>–ß–∞—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç!</p>
            </div>
        `;
        return;
    }
    
    chats.forEach(chat => {
        const chatElement = document.createElement('div');
        chatElement.className = `chat-item ${chat.id === currentChatId ? 'active' : ''}`;
        
        chatElement.innerHTML = `
            <div class="chat-item-content" onclick="switchToChat('${chat.id}')">
                <div class="chat-header">
                    <div class="chat-title">${escapeHtml(chat.title)}</div>
                    <div class="chat-date">${formatDate(chat.lastActivity)}</div>
                </div>
                <div class="chat-preview">${escapeHtml(chat.preview)}</div>
            </div>
            <button class="delete-chat-btn" onclick="deleteChat('${chat.id}', event)">
                <i class="fas fa-trash"></i>
            </button>
        `;
        
        chatsList.appendChild(chatElement);
    });
}

function switchToChat(chatId) {
    const chat = chats.find(c => c.id === chatId);
    if (!chat) return;
    
    currentChatId = chatId;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
    const messagesContainer = document.getElementById('messagesContainer');
    messagesContainer.innerHTML = '';
    
    if (chat.messages.length === 0) {
        messagesContainer.innerHTML = `
            <div id="emptyChat" class="empty-chat">
                <div class="empty-chat-icon">ü´ê</div>
                <h3>–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ!</h3>
                <p>–≠—Ç–æ—Ç —á–∞—Ç –ø–æ–∫–∞ –ø—É—Å—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.</p>
            </div>
        `;
    } else {
        chat.messages.forEach(message => {
            displayMessage(message);
        });
    }
    
    closeSidebarFunction();
    updateChatsList();
    
    showStatus(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ —á–∞—Ç: ${chat.title}`, 'info');
}

function deleteChat(chatId, event) {
    if (event) {
        event.stopPropagation();
    }
    
    if (chats.length <= 1) {
        showStatus('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Ç', 'warning');
        return;
    }
    
    const chatIndex = chats.findIndex(chat => chat.id === chatId);
    if (chatIndex === -1) return;
    
    const chatToDelete = chats[chatIndex];
    
    if (confirm(`–£–¥–∞–ª–∏—Ç—å —á–∞—Ç "${chatToDelete.title}"?`)) {
        // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π
        if (currentChatId === chatId) {
            const newCurrentChat = chats.find(chat => chat.id !== chatId);
            currentChatId = newCurrentChat ? newCurrentChat.id : null;
        }
        
        // –£–¥–∞–ª—è–µ–º —á–∞—Ç
        chats.splice(chatIndex, 1);
        
        // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        if (chats.length === 0) {
            createNewChat();
        } else if (currentChatId === null) {
            currentChatId = chats[0].id;
        }
        
        saveChats();
        updateChatsList();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        if (currentChatId) {
            switchToChat(currentChatId);
        }
        
        showStatus('–ß–∞—Ç —É–¥–∞–ª–µ–Ω', 'success');
    }
}

function formatDate(timestamp) {
    const date = new Date(timestamp);
    const now = new Date();
    const diffTime = Math.abs(now - date);
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays === 0) {
        return date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
    } else if (diffDays === 1) {
        return '–í—á–µ—Ä–∞';
    } else if (diffDays < 7) {
        return date.toLocaleDateString('ru-RU', { weekday: 'short' });
    } else {
        return date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'short' });
    }
}

function escapeHtml(unsafe) {
    return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}

function showStatus(message, type = 'info') {
    const statusDiv = document.getElementById('statusMessage');
    if (!statusDiv) return;
    
    statusDiv.textContent = message;
    statusDiv.className = `status-message status-${type}`;
    statusDiv.style.display = 'block';
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
    setTimeout(() => {
        statusDiv.style.display = 'none';
    }, 3000);
}

function saveChats() {
    try {
        const chatsToSave = chats.map(chat => ({
            ...chat,
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
            messages: chat.messages.slice(-50)
        }));
        
        localStorage.setItem('fruityChat_chats', JSON.stringify(chatsToSave));
        localStorage.setItem('fruityChat_currentChatId', currentChatId);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–æ–≤:', error);
        showStatus('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–æ–≤', 'error');
    }
}

function loadChats() {
    try {
        const savedChats = localStorage.getItem('fruityChat_chats');
        const savedCurrentChatId = localStorage.getItem('fruityChat_currentChatId');
        
        if (savedChats) {
            chats = JSON.parse(savedChats);
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
            if (savedCurrentChatId && chats.some(chat => chat.id === savedCurrentChatId)) {
                currentChatId = savedCurrentChatId;
                switchToChat(currentChatId);
            } else if (chats.length > 0) {
                currentChatId = chats[0].id;
                switchToChat(currentChatId);
            }
        } else {
            // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π —á–∞—Ç, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö
            createNewChat();
        }
        
        updateChatsList();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤:', error);
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
        createNewChat();
    }
}

function createFruitRain() {
    const fruitRain = document.querySelector('.fruit-rain');
    if (!fruitRain) return;
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ñ—Ä—É–∫—Ç—ã
    fruitRain.innerHTML = '';
    
    // –°–æ–∑–¥–∞–µ–º 15 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ—Ä—É–∫—Ç–æ–≤
    for (let i = 0; i < 15; i++) {
        setTimeout(() => {
            const fruit = document.createElement('div');
            fruit.className = 'fruit';
            fruit.textContent = FRUIT_EMOJIS[Math.floor(Math.random() * FRUIT_EMOJIS.length)];
            
            // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∏ –∞–Ω–∏–º–∞—Ü–∏—è
            const left = Math.random() * 100;
            const duration = 5 + Math.random() * 10;
            const delay = Math.random() * 5;
            
            fruit.style.left = `${left}%`;
            fruit.style.animationDuration = `${duration}s`;
            fruit.style.animationDelay = `${delay}s`;
            
            fruitRain.appendChild(fruit);
            
            // –£–¥–∞–ª—è–µ–º —Ñ—Ä—É–∫—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
                if (fruit.parentNode === fruitRain) {
                    fruitRain.removeChild(fruit);
                }
            }, (duration + delay) * 1000);
        }, i * 300);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.switchToChat = switchToChat;
window.deleteChat = deleteChat;
window.createNewChat = createNewChat;
window.sendMessage = sendMessage;
window.openSidebar = openSidebar;
window.closeSidebarFunction = closeSidebarFunction;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
console.log('FruityChat –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! ü´ê');
