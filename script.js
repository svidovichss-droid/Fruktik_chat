// script.js
// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API Mistral - –∫–ª—é—á —Ç–µ–ø–µ—Ä—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const API_CONFIG = {
    url: 'https://api.mistral.ai/v1/chat/completions',
    // –ö–ª—é—á –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ config.js
    key: null
};

// –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Mistral
const MODELS = {
    'mistral-tiny': 'mistral-tiny',
    'mistral-small': 'mistral-small', 
    'mistral-medium': 'mistral-medium'
};

// –ò—Å–ø–æ–ª—å–∑—É–µ–º mistral-small –∫–∞–∫ –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const MODEL = MODELS['mistral-small'];

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let chats = [];
let currentChatId = null;
let isSending = false;
const MAX_CHATS = 10;
const MAX_MESSAGE_LENGTH = 1000;

// –≠–º–æ–¥–∑–∏ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤
const FRUIT_EMOJIS = ['üçì', 'üçç', 'üçá', 'üçâ', 'üçä', 'üçã', 'üçå', 'üçé', 'üçë', 'üçí', 'ü•≠', 'ü´ê', 'üçê', 'ü•ù'];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

async function initializeApp() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å API –∫–ª—é—á–æ–º
    await loadConfig();
    
    createFruitRain();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    loadChats();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—Ä—É–∫—Ç–æ–≤—ã–π –¥–æ–∂–¥—å –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
    setInterval(createFruitRain, 15000);
    
    setupEventListeners();
    setupAccessibility();
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É
    document.documentElement.setAttribute('data-theme', 'light');
    document.body.style.background = 'linear-gradient(135deg, #ffafbd 0%, #ffc3a0 100%)';
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PWA
    initializePWA();
}

async function loadConfig() {
    try {
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ñ–∞–π–ª–∞
        const response = await fetch('config.js');
        if (response.ok) {
            // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º config.js
            const script = document.createElement('script');
            script.src = 'config.js';
            script.type = 'text/javascript';
            document.head.appendChild(script);
            
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            await new Promise(resolve => setTimeout(resolve, 100));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –ª–∏ API –∫–ª—é—á
            if (typeof window.API_KEYS !== 'undefined' && window.API_KEYS.mistral) {
                API_CONFIG.key = window.API_KEYS.mistral;
                console.log('API –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            } else {
                throw new Error('API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
            }
        } else {
            throw new Error('–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
        showStatus('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'error');
    }
}

function initializePWA() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if (window.matchMedia('(display-mode: standalone)').matches) {
        console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ PWA —Ä–µ–∂–∏–º–µ');
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
    updateOnlineStatus();
    window.addEventListener('online', updateOnlineStatus);
    window.addEventListener('offline', updateOnlineStatus);
}

function updateOnlineStatus() {
    if (navigator.onLine) {
        showStatus('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
    } else {
        showStatus('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ', 'error');
    }
}

function setupEventListeners() {
    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendButton');
    const newChatButton = document.getElementById('newChatButton');
    const menuButton = document.getElementById('menuButton');
    const closeSidebar = document.getElementById('closeSidebar');
    const sidebarOverlay = document.getElementById('sidebarOverlay');
    const chatContainer = document.querySelector('.chat-container');
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Å—á–µ—Ç–æ–º —Å–∏–º–≤–æ–ª–æ–≤
    messageInput.addEventListener('input', function(e) {
        handleMessageInput(e);
        updateCharacterCount();
    });
    
    messageInput.addEventListener('keypress', handleMessageKeypress);
    messageInput.addEventListener('paste', handlePaste);
    
    // –ö–Ω–æ–ø–∫–∏
    sendButton.addEventListener('click', sendMessage);
    newChatButton.addEventListener('click', createNewChat);
    menuButton.addEventListener('click', openSidebar);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    closeSidebar.addEventListener('click', function(e) {
        closeSidebarFunction();
    });
    
    sidebarOverlay.addEventListener('click', function(e) {
        closeSidebarFunction();
    });
    
    // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    chatContainer.addEventListener('click', function() {
        messageInput.focus();
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–∞–π–ø–æ–≤ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    setupSwipeGestures();
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Escape
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeSidebarFunction();
        }
    });
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    window.addEventListener('beforeunload', function(e) {
        if (isSending) {
            e.preventDefault();
            e.returnValue = '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–π—Ç–∏?';
        }
    });
}

function updateCharacterCount() {
    const messageInput = document.getElementById('messageInput');
    const charCount = document.getElementById('charCount');
    const count = messageInput.value.length;
    
    charCount.textContent = `${count}/${MAX_MESSAGE_LENGTH}`;
    
    if (count > MAX_MESSAGE_LENGTH * 0.9) {
        charCount.classList.add('warning');
    } else {
        charCount.classList.remove('warning');
    }
}

function setupAccessibility() {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ARIA-–∞—Ç—Ä–∏–±—É—Ç—ã
    document.getElementById('messageInput').setAttribute('aria-label', '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –§—Ä—É–∫—Ç–∏–∫–∞');
    document.getElementById('sendButton').setAttribute('aria-label', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
}

function handleMessageInput(e) {
    const message = e.target.value.trim();
    const sendButton = document.getElementById('sendButton');
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
    sendButton.disabled = !message || message.length === 0;
}

function handleMessageKeypress(event) {
    if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–æ–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const message = document.getElementById('messageInput').value.trim();
        if (message && !isSending) {
            sendMessage();
        }
    }
}

function handlePaste(e) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ - –æ–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    const pastedText = e.clipboardData.getData('text');
    if (pastedText.length > MAX_MESSAGE_LENGTH) {
        e.preventDefault();
        const trimmedText = pastedText.substring(0, MAX_MESSAGE_LENGTH);
        document.getElementById('messageInput').value = trimmedText;
        showStatus('–¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–π –¥–ª–∏–Ω—ã', 'info');
        updateCharacterCount();
    }
}

function setupSwipeGestures() {
    let startX = 0;
    let startY = 0;
    let isSwiping = false;
    
    document.querySelector('.chat-container').addEventListener('touchstart', function(e) {
        startX = e.touches[0].clientX;
        startY = e.touches[0].clientY;
        isSwiping = true;
    });
    
    document.querySelector('.chat-container').addEventListener('touchmove', function(e) {
        if (!isSwiping) return;
        
        const currentX = e.touches[0].clientX;
        const diffX = currentX - startX;
        
        // –ï—Å–ª–∏ —Å–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ –±–æ–ª–µ–µ 50px, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
        if (diffX > 50) {
            openSidebar();
            isSwiping = false;
        }
    });
    
    document.querySelector('.chat-container').addEventListener('touchend', function(e) {
        isSwiping = false;
    });
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª—å—é
function openSidebar() {
    const sidebar = document.getElementById('chatsSidebar');
    const overlay = document.getElementById('sidebarOverlay');
    
    sidebar.classList.add('active');
    sidebar.setAttribute('aria-hidden', 'false');
    overlay.classList.add('active');
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    document.body.style.overflow = 'hidden';
    
    renderChatsList();
}

function closeSidebarFunction() {
    const sidebar = document.getElementById('chatsSidebar');
    const overlay = document.getElementById('sidebarOverlay');
    
    sidebar.classList.remove('active');
    sidebar.setAttribute('aria-hidden', 'true');
    overlay.classList.remove('active');
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª
    document.body.style.overflow = '';
    
    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
    document.getElementById('messageInput').focus();
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏
function loadChats() {
    try {
        const savedChats = localStorage.getItem('fruitChats');
        if (savedChats) {
            chats = JSON.parse(savedChats);
            
            if (chats.length > 0) {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –∏–ª–∏ —Å–∞–º—ã–π –Ω–æ–≤—ã–π
                const lastActiveChat = chats.find(chat => chat.id === currentChatId) || chats[chats.length - 1];
                currentChatId = lastActiveChat.id;
                loadChat(currentChatId);
            } else {
                createNewChat();
            }
        } else {
            createNewChat();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤:', error);
        showStatus('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤', 'error');
        createNewChat();
    }
}

function saveChats() {
    try {
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤
        if (chats.length > MAX_CHATS) {
            const chatsToRemove = chats.length - MAX_CHATS;
            chats = chats.slice(chatsToRemove);
            showStatus(`–£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ —á–∞—Ç—ã (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${MAX_CHATS})`, 'info');
        }
        
        localStorage.setItem('fruitChats', JSON.stringify(chats));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–æ–≤:', error);
        showStatus('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–æ–≤', 'error');
    }
}

function createNewChat() {
    const newChat = {
        id: generateChatId(),
        title: '–ù–æ–≤—ã–π —á–∞—Ç',
        messages: [],
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    };
    
    chats.push(newChat);
    currentChatId = newChat.id;
    saveChats();
    renderChat();
    renderChatsList();
    closeSidebarFunction();
    
    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    const messageInput = document.getElementById('messageInput');
    messageInput.focus();
    
    showStatus('–ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω!', 'success');
}

function generateChatId() {
    return `chat_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
}

function loadChat(chatId) {
    currentChatId = chatId;
    renderChat();
    closeSidebarFunction();
    
    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    document.getElementById('messageInput').focus();
    
    showStatus('–ß–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω', 'success');
}

function deleteChat(chatId, event) {
    if (event) {
        event.preventDefault();
        event.stopPropagation();
    }
    
    if (chats.length <= 1) {
        showStatus('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —á–∞—Ç!', 'error');
        return;
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç? –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.')) {
        const chatIndex = chats.findIndex(chat => chat.id === chatId);
        const chatToDelete = chats[chatIndex];
        
        chats = chats.filter(chat => chat.id !== chatId);
        
        if (currentChatId === chatId) {
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–æ—Å–µ–¥–Ω–∏–π —á–∞—Ç
            const newIndex = chatIndex >= chats.length ? chats.length - 1 : chatIndex;
            currentChatId = chats.length > 0 ? chats[newIndex].id : null;
        }
        
        saveChats();
        renderChat();
        renderChatsList();
        showStatus('–ß–∞—Ç —É–¥–∞–ª–µ–Ω!', 'success');
    }
}

function updateChatTitle(chatId, newTitle) {
    const chat = chats.find(c => c.id === chatId);
    if (chat && chat.title !== newTitle) {
        chat.title = newTitle.substring(0, 50); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
        chat.updatedAt = new Date().toISOString();
        saveChats();
        renderChatsList();
    }
}

function renderChatsList() {
    const chatsList = document.getElementById('chatsList');
    
    if (chats.length === 0) {
        chatsList.innerHTML = '<div class="text-center text-gray-500 py-8"><i class="fas fa-comments text-2xl mb-2"></i><p>–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤</p></div>';
        return;
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Ç—ã –ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    const sortedChats = [...chats].sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));
    
    chatsList.innerHTML = sortedChats.map(chat => `
        <div class="chat-item ${chat.id === currentChatId ? 'active' : ''}" role="listitem">
            <div class="chat-item-content" onclick="loadChat('${chat.id}')" role="button" tabindex="0" onkeypress="if(event.key==='Enter') loadChat('${chat.id}')">
                <div class="chat-header">
                    <div class="chat-title">${escapeHtml(chat.title)}</div>
                    <div class="chat-date">${formatDate(chat.updatedAt)}</div>
                </div>
                <div class="chat-preview">${getChatPreview(chat)}</div>
            </div>
            <button class="delete-chat-btn" onclick="deleteChat('${chat.id}', event)" aria-label="–£–¥–∞–ª–∏—Ç—å —á–∞—Ç">
                <i class="fas fa-trash" aria-hidden="true"></i>
            </button>
        </div>
    `).join('');
}

function getChatPreview(chat) {
    if (chat.messages.length === 0) return '–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π';
    
    const lastMessage = chat.messages[chat.messages.length - 1];
    const content = lastMessage.content.substring(0, 30);
    return lastMessage.role === 'user' ? `–í—ã: ${content}...` : `–§—Ä—É–∫—Ç–∏–∫: ${content}...`;
}

function formatDate(dateString) {
    const date = new Date(dateString);
    const now = new Date();
    const diffMs = now - date;
    const diffMins = Math.floor(diffMs / (1000 * 60));
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    
    if (diffMins < 1) {
        return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    } else if (diffMins < 60) {
        return `${diffMins} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    } else if (diffHours < 24) {
        return `${diffHours} —á –Ω–∞–∑–∞–¥`;
    } else if (diffDays === 1) {
        return '–í—á–µ—Ä–∞';
    } else if (diffDays < 7) {
        return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
    } else {
        return date.toLocaleDateString('ru-RU');
    }
}

function renderChat() {
    const chatMessages = document.getElementById('chatMessages');
    
    if (!currentChatId || chats.length === 0) {
        chatMessages.innerHTML = getEmptyChatHTML();
        return;
    }
    
    const currentChat = chats.find(chat => chat.id === currentChatId);
    if (!currentChat) {
        chatMessages.innerHTML = getEmptyChatHTML();
        return;
    }
    
    chatMessages.innerHTML = '';
    
    if (currentChat.messages.length === 0) {
        chatMessages.innerHTML = getEmptyChatHTML();
        return;
    }
    
    currentChat.messages.forEach(message => {
        addMessageToChat(message.role, message.content, false);
    });
    
    scrollToBottom();
}

function getEmptyChatHTML() {
    return `
        <div class="empty-chat" id="emptyChat">
            <div class="empty-chat-icon">üçì</div>
            <h2 class="text-2xl font-bold mb-2">–ù–∞—á–Ω–∏ –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä!</h2>
            <p class="text-lg">–ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –§—Ä—É–∫—Ç–∏–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.</p>
            <div class="mt-4 text-sm text-gray-600">
                <p>‚ú® –§—Ä—É–∫—Ç–∏–∫ –ø–æ–º–æ–∂–µ—Ç —Å:</p>
                <ul class="list-disc list-inside mt-2 text-left">
                    <li>–î–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏</li>
                    <li>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ–º —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º</li>
                    <li>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π –∫ —É—Ä–æ–∫–∞–º</li>
                </ul>
            </div>
        </div>
    `;
}

// –°–æ–∑–¥–∞–µ–º —Ñ—Ä—É–∫—Ç–æ–≤—ã–π –¥–æ–∂–¥—å
function createFruitRain() {
    const rainContainer = document.getElementById('fruitRain');
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —Ñ—Ä—É–∫—Ç–æ–≤
    rainContainer.innerHTML = '';
    
    const fruitCount = window.innerWidth < 768 ? 10 : 20;
    
    for (let i = 0; i < fruitCount; i++) {
        setTimeout(() => {
            const fruit = document.createElement('div');
            fruit.className = 'fruit';
            fruit.textContent = getRandomFruit();
            fruit.style.left = Math.random() * 100 + 'vw';
            fruit.style.animationDuration = (Math.random() * 5 + 3) + 's';
            fruit.style.animationDelay = Math.random() * 2 + 's';
            fruit.style.opacity = Math.random() * 0.4 + 0.2;
            fruit.style.fontSize = (Math.random() * 10 + 20) + 'px';
            fruit.style.zIndex = '-1';
            rainContainer.appendChild(fruit);
            
            // –£–¥–∞–ª—è–µ–º —Ñ—Ä—É–∫—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
                if (fruit.parentNode === rainContainer) {
                    rainContainer.removeChild(fruit);
                }
            }, parseFloat(fruit.style.animationDuration) * 1000 + 1000);
        }, i * 200);
    }
}

// –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function showStatus(message, type = 'info') {
    const statusEl = document.getElementById('statusMessage');
    statusEl.textContent = message;
    statusEl.className = 'status-message';
    
    switch (type) {
        case 'success':
            statusEl.classList.add('status-success');
            break;
        case 'error':
            statusEl.classList.add('status-error');
            break;
        case 'warning':
            statusEl.classList.add('status-warning');
            break;
        default:
            statusEl.classList.add('status-info');
    }
    
    statusEl.style.display = 'block';
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
    const duration = type === 'error' ? 5000 : 3000;
    setTimeout(() => {
        statusEl.style.display = 'none';
    }, duration);
}

function showTypingIndicator() {
    document.getElementById('typingIndicator').classList.remove('hidden');
    document.getElementById('typingIndicator').setAttribute('aria-hidden', 'false');
    scrollToBottom();
}

function hideTypingIndicator() {
    document.getElementById('typingIndicator').classList.add('hidden');
    document.getElementById('typingIndicator').setAttribute('aria-hidden', 'true');
}

function scrollToBottom() {
    const container = document.getElementById('chatMessages');
    setTimeout(() => {
        container.scrollTop = container.scrollHeight;
    }, 100);
}

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
function escapeHtml(unsafe) {
    if (!unsafe) return '';
    return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}

async function sendMessage() {
    if (isSending) {
        showStatus('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...', 'warning');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if (!API_CONFIG.key) {
        showStatus('–û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω', 'error');
        return;
    }
    
    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendButton');
    let message = messageInput.value.trim();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!message) {
        showStatus('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', 'error');
        messageInput.focus();
        return;
    }
    
    if (message.length > MAX_MESSAGE_LENGTH) {
        showStatus(`–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º ${MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)`, 'error');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if (!navigator.onLine) {
        showStatus('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ', 'error');
        return;
    }
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
    isSending = true;
    sendButton.disabled = true;
    sendButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
    sendButton.setAttribute('aria-label', '–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...');
    
    // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç–æ–π —á–∞—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    const emptyChat = document.getElementById('emptyChat');
    if (emptyChat) {
        emptyChat.remove();
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    addMessageToChat('user', message);
    messageInput.value = '';
    updateCharacterCount();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    const sendButtonInput = document.getElementById('sendButton');
    sendButtonInput.disabled = true;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
    const currentChat = chats.find(chat => chat.id === currentChatId);
    if (currentChat) {
        currentChat.messages.push({ role: 'user', content: message });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (currentChat.messages.length === 1) {
            const title = message.length > 20 ? message.substring(0, 20) + '...' : message;
            updateChatTitle(currentChatId, title);
        }
        
        currentChat.updatedAt = new Date().toISOString();
        saveChats();
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
    showTypingIndicator();
    showStatus('–§—Ä—É–∫—Ç–∏–∫ –¥—É–º–∞–µ—Ç...', 'info');
    
    try {
        const response = await callMistralAPI(currentChat);
        const aiResponse = response.choices[0].message.content;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ —á–∞—Ç
        if (currentChat) {
            currentChat.messages.push({ role: 'assistant', content: aiResponse });
            currentChat.updatedAt = new Date().toISOString();
            saveChats();
        }
        
        hideTypingIndicator();
        addMessageToChat('assistant', aiResponse);
        showStatus('–§—Ä—É–∫—Ç–∏–∫ –æ—Ç–≤–µ—Ç–∏–ª!', 'success');
        
    } catch (error) {
        handleAPIError(error);
    } finally {
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
        isSending = false;
        sendButton.disabled = false;
        sendButton.innerHTML = '<i class="fas fa-paper-plane"></i>';
        sendButton.setAttribute('aria-label', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
        messageInput.focus();
    }
}

async function callMistralAPI(currentChat) {
    const messagesForAPI = [
        { 
            role: 'system', 
            content: `–¢—ã - –§—Ä—É–∫—Ç–∏–∫, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –¥–µ—Ç–µ–π –º–ª–∞–¥—à–µ–≥–æ —à–∫–æ–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞. –¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å –≤ —É—á–µ–±–µ, —Å–æ–±–ª—é–¥–∞—è –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≥—Ä–∞–º–º–∞—Ç–∏–∫—É —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.

–û–°–û–ë–´–ï –ü–†–ê–í–ò–õ–ê:
1. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –≥—Ä–∞–º–æ—Ç–Ω–æ, –±–µ–∑ –æ—à–∏–±–æ–∫ - —Ç—ã –æ–±—Ä–∞–∑–µ—Ü –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞
2. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ, –ø–æ–Ω—è—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
3. –û–±—ä—è—Å–Ω—è–π —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã –¥–æ—Å—Ç—É–ø–Ω—ã–º —è–∑—ã–∫–æ–º
4. –ë—É–¥—å —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º
5. –ò—Å–ø–æ–ª—å–∑—É–π 1-2 —ç–º–æ–¥–∑–∏ –≤ –æ—Ç–≤–µ—Ç–µ –¥–ª—è –¥—Ä—É–∂–µ–ª—é–±–∏—è
6. –ù–µ –¥–∞–≤–∞–π –≥–æ—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è, –∞ –æ–±—ä—è—Å–Ω—è–π –∫–∞–∫ —Ä–µ—à–∞—Ç—å
7. –ü–æ–æ—â—Ä—è–π –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ –∏ –∑–∞–¥–∞–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤

–ü–†–ò–ú–ï–†–´ –ü–†–ê–í–ò–õ–¨–ù–´–• –û–¢–í–ï–¢–û–í:
"–ü—Ä–∏–≤–µ—Ç! –Ø –§—Ä—É–∫—Ç–∏–∫ üçé –ü–æ–º–æ–≥—É —Ç–µ–±–µ —Å —É—Ä–æ–∫–∞–º–∏. –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?"
"–ú–æ–ª–æ–¥–µ—Ü, —á—Ç–æ —Å–ø—Ä–æ—Å–∏–ª! –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç—É –∑–∞–¥–∞—á—É –ø–æ —à–∞–≥–∞–º üß©"
"–ó–∞–ø–æ–º–Ω–∏: '–∂–∏-—à–∏' –ø–∏—à–∏ —Å –±—É–∫–≤–æ–π '–∏'. –≠—Ç–æ –ø—Ä–∞–≤–∏–ª–æ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ ‚úèÔ∏è"` 
        },
        ...currentChat.messages.slice(-8) // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    ];
    
    const response = await fetch(API_CONFIG.url, {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${API_CONFIG.key}`,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            model: MODEL,
            messages: messagesForAPI,
            max_tokens: 800,
            temperature: 0.3,
            top_p: 0.9,
            stream: false
        })
    });
    
    if (!response.ok) {
        let errorMessage = `HTTP error! status: ${response.status}`;
        try {
            const errorData = await response.json();
            errorMessage = errorData.error?.message || errorData.error?.code || errorMessage;
        } catch (e) {
            const errorText = await response.text();
            if (errorText) {
                errorMessage = errorText;
            }
        }
        throw new Error(errorMessage);
    }
    
    return await response.json();
}

function handleAPIError(error) {
    console.error('API Error:', error);
    hideTypingIndicator();
    
    let userMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è';
    
    if (error.message.includes('401') || error.message.includes('authentication')) {
        userMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª—é—á–∞.';
    } else if (error.message.includes('429')) {
        userMessage = '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    } else if (error.message.includes('network') || error.message.includes('Failed to fetch')) {
        userMessage = '–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
    } else if (error.message.includes('quota') || error.message.includes('limit')) {
        userMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
    
    showStatus(userMessage, 'error');
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —á–∞—Ç
    addMessageToChat('assistant', `–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${userMessage}. –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑. üçì`);
}

function addMessageToChat(role, content, animate = true) {
    const chatMessages = document.getElementById('chatMessages');
    
    // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç–æ–π —á–∞—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    const emptyChat = document.getElementById('emptyChat');
    if (emptyChat) {
        emptyChat.remove();
    }
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${animate ? 'message-enter' : ''}`;
    messageDiv.setAttribute('role', role === 'user' ? 'user-message' : 'assistant-message');
    
    const isUser = role === 'user';
    
    messageDiv.innerHTML = `
        <div class="flex items-start ${isUser ? 'flex-row-reverse' : ''}">
            <div class="${isUser ? 'user-avatar blackberry-glow' : 'bot-avatar'}">
                <span class="avatar-emoji">${isUser ? 'ü´ê' : getRandomFruit()}</span>
            </div>
            <div class="chat-bubble ${isUser ? 'user-bubble' : 'bot-bubble'}">
                <div class="message-content">${escapeHtml(content)}</div>
                <div class="message-time">${new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}</div>
            </div>
        </div>
    `;
    
    chatMessages.appendChild(messageDiv);
    scrollToBottom();
}

function getRandomFruit() {
    return FRUIT_EMOJIS[Math.floor(Math.random() * FRUIT_EMOJIS.length)];
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA
window.addEventListener('beforeinstallprompt', (e) => {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
    e.preventDefault();
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–∑–∂–µ
    window.deferredPrompt = e;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ—é –∫–Ω–æ–ø–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    showInstallPrompt();
});

function showInstallPrompt() {
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –∫–Ω–æ–ø–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    console.log('PWA –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA
function installPWA() {
    if (window.deferredPrompt) {
        window.deferredPrompt.prompt();
        window.deferredPrompt.userChoice.then((choiceResult) => {
            if (choiceResult.outcome === 'accepted') {
                console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª —É—Å—Ç–∞–Ω–æ–≤–∫—É PWA');
            }
            window.deferredPrompt = null;
        });
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.loadChat = loadChat;
window.deleteChat = deleteChat;
window.installPWA = installPWA;
